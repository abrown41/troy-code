import numpy as np
import matplotlib.pyplot as plt
import math

# Particle in a box

L = 1e-8                                                                       # Width of box in metres
n = int(input('Eigenstate? '))                                                 # Lowest eigenstate
k = (n * math.pi) / L
norm = math.sqrt((2 / L))                                                      # Normalisation coefficient
hbar = 1.054e-34                                                               # Reduced Planck constant in Joule-seconds
m = 9.109e-31                                                                  # Electron mass in kilograms
E = (n**2 * math.pi**2 * hbar**2) / (2 * m * L)                                # Energy eigenvalue

x = np.linspace(0, L, 100)                                                     # Discretising domain
dx = x[1] - x[0]                                                               # Defining grid spacing

def wavefunction(x):                                                           # Analytical solution for comparison
    psi = norm*math.sin(k*x)
    return psi

exact = np.zeros(len(x))                                                       
exact[0] = 0
exact[-1] = 0

for i in range(1, len(x)-1):
    exact[i] = wavefunction(x[i])

# Construct matrix equation Ax = b, where x is vector containing the psi_i values
# A_i_i-1 = 1/(dx^2)
# A_i_i = -2/(dx^2) + (2*E*m)/(hbar^2)
# A_i_i+1 = 1/(dx^2)

A = np.zeros((len(x), len(x)))
A[0, 0] = -2
A[0, 1] = 1
A[-1, -2] = 1
A[-1, -1] = -2

for i in range(1, len(x)-1):
    A[i, i-1] = 1/(dx**2)
    A[i, i] = (-2/(dx**2)) + ((2*E*m)/(hbar**2))
    A[i, i+1] = 1/(dx**2)

b = np.zeros(len(x))

psi_approx = np.linalg.solve(A, b)

# plt.figure(0)
# plt.plot(x, psi_approx, label='Approximate Solution')

# plt.figure(1)
# plt.plot(x, exact, label='Exact Solution')